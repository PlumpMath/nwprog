# Network Programming

This coursework project consists of several parts:

*	A HTTP *client* supporting HTTP/1.0 GET and PUT methods with local files.
*	Tests for the internal components.

## Building

Using the supplied Makefile should be enough to build the bin/client binary:

	$ make

Building requires GCC 4.6 or newer, with support for -std=gnu99 and -D _POSIX_C_SOURCE=200112L

## Client

	$ ./bin/client -h
	Usage: ./bin/client [options] <url>

			-h      --help                  Display this text
			-q      --quiet                 Less output
			-v      --verbose               More output
			-d      --debug                 Debug output

			-G      --get=file              GET to file
			-P      --put=file              PUT from file

### Examples

	$ ./bin/client -q http://www.ietf.org/rfc/rfc2616.txt
	$ ./bin/client -G rfc2616.txt http://www.ietf.org/rfc/rfc2616.txt
	$ ./bin/client -P test.txt http://nwprog1.netlab.hut.fi:3000/test.txt

## Testing

The code includes some simple tests for some of the functionality, mostly related to string parsing:

	$ make test

The code has been built on the following OS/Distributions:

	Ubuntu 12.04.3 LTS					amd64
	Debian GNU/Linux 7.0 (wheezy)		amd64

### Client
The client has been tested with the following servers:

#### Apache

`www.ietf.org`

#### BaseHTTP/0.3 Python/2.7.3
		
See `doc/server.py`

#### nwhttpd/0.5

Serving on `nwprog1.netlab.hut.fi`

#### Known limitations
*	The client does not fully support flowed HTTP headers (it will process them as duplicate headers).
*   The client does not support `Content-Encoding: chunked`.
*	The client does not support HTTP/1.1 (piplining).

## Design

The design of the code is based on splitting the logic for the various components from the generic components shared
across all applications.

#### common/http

Basic HTTP protocol operations, including formatting/writing and reading/parsing protocol message lines.

Operates as a line-based sender/receiver using stdio `FILE *`, with separate http_read/write() functions for handling
request/response bodies.

#### common/log

Basic logging functionality.

#### common/parse

A simple state/character based token parser (lexer).

#### common/sock

Various socket-related functions.

Currently mostly sockaddr-related, due to relatively simple client needs.

#### common/tcp

TCP connection support, including a `getaddrinfo`-based `tcp_connect()`, supporting IPv6.

Currently only basic blocking sockets.

#### common/url

URL parsing support, parsing URL strings such as `http://host:port/path` into a `struct url`.

#### common/util

Miscellaenous utilities, related to strings.

#### client/client

HTTP client application implementation, using common/tcp and common/http for the actual network traffic, but dealing with
local FILE I/O for GET and PUT files.


